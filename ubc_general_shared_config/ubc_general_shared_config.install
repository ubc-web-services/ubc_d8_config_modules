<?php


/**
 * Implements hook_install().
 *
 * We don't want users to be able to delete our ubc_general_shared_config content
 * type. So therefore we have to tell Drupal that this is the case. This
 * can't be done in the content type's configuration YAML file, so we have to
 * do it in code, here.
 *
 * @ingroup ubc_general_shared_config
 */
/* function ubc_general_shared_config_install() {
  // Do not allow the locked content type to be deleted.
  $locked = Drupal::state()->get('node.type.locked');
  $locked['ubc_general_shared_config'] = 'ubc_general_shared_config';
  Drupal::state()->set('node.type.locked', $locked);
} */


/**
 * Implements hook_uninstall().
 *
 * Our content types will live on in the Drupal installation, even after this
 * module is uninstalled. This is a good thing, since it allows the user to
 * make decisions about their fate. Therefore we should give the user the
 * option of deleting them.
 *
 * Since we told Drupal that our ubc_general_shared_config is locked, we now have
 * to tell it to unlock.
 *
 * @ingroup ubc_general_shared_config
 */
/* function ubc_general_shared_config_uninstall() {
  // Allow announcement to be deleted.
  $locked = Drupal::state()->get('node.type.locked');
  unset($locked['ubc_general_shared_config']);
  Drupal::state()->set('node.type.locked', $locked);
}
 */

/**
 * Update configuration from file.
 * https://www.drupal.org/docs/8/api/update-api/introduction-to-update-api-for-drupal-8
 */
/* function ubc_general_shared_config_update_8001() {
  $config_path = \Drupal::service('extension.list.module')->getPath('ubc_general_shared_config') . '/config/install/pathauto.pattern.taxonomy_terms.yml';
  $data = \Symfony\Component\Yaml\Yaml::parse($config_path);
  \Drupal::configFactory()
    ->getEditable('pathauto.pattern.taxonomy_terms.yml')
    ->setData($data)
    ->save(TRUE);

  return 'The Taxonomy path has been updated.';
} */

/**
 * Update pathauto config.
 */
/* function ubc_general_shared_config_update_8002() {
  // Load all pattern configuration entities.
  foreach (\Drupal::configFactory()->listAll('pathauto.pattern.') as $pattern_config_name) {
    $pattern_config = \Drupal::configFactory()->getEditable($pattern_config_name);

    // Loop patterns and swap the node_type plugin by the entity_bundle:node
    // plugin.
    if ($pattern_config->get('type') === 'canonical_entities:node') {
      $selection_criteria = $pattern_config->get('selection_criteria');
      foreach ($selection_criteria as $uuid => $condition) {
        if ($condition['id'] === 'node_type') {
          $pattern_config->set("selection_criteria.$uuid.id", 'entity_bundle:node');
          $pattern_config->save();
          break;
        }
      }
    }
  }
} */

