<?php

/**
 * @file
 * Contains ubc_media_entities.module.
 */

use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\user\Entity\Role;

/**
 * Implements hook_file_download().
 *
 * See https://www.chapterthree.com/blog/drupal-8-9-media-entities-private-files-and-broken-access-control.
 */
function ubc_media_entities_file_download($uri) {
  // Check if the file is coming from the private stream wrapper.
  if (StreamWrapperManager::getScheme($uri) == 'private') {

    // 1: Block anonymous users.
    if (\Drupal::currentUser()->isAnonymous()) {
      return -1;
    }

    // 2: The user does not have the permission "access private files".
    if (!\Drupal::currentUser()->hasPermission('access private files')) {
      return -1;
    }
  }
  return NULL;
}

/**
 * Implements hook_permission().
 */
function ubc_media_entities_permission() {
  $permissions = [];
  $media_types = \Drupal::entityTypeManager()->getStorage('media_type')->loadMultiple();

  foreach ($media_types as $media_type) {
    $type_id = $media_type->id();
    $type_label = $media_type->label();

    // Create 'view' permission for the media type.
    $permissions["view $type_id media"] = [
      'title' => t('View @type media', ['@type' => $type_label]),
      'description' => t('Allows users to view media of type @type.', ['@type' => $type_label]),
      'restrict access' => TRUE,
    ];

  }

  return $permissions;
}

/**
 * Implements hook_entity_type_alter().
 */
function ubc_media_entities_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['media'])) {
    $entity_types['media']->setHandlerClass('access', 'Drupal\ubc_media_entities\MediaAccessControlHandler');
  }
}

/**
 * Implements hook_post_update_().
 *
 * Add permission to view private files.
 */
function ubc_media_entities_post_update_grant_private_file_permission() {
  $role_object = Role::load('authenticated');
  $role_object->grantPermission('access private files');
  $role_object->save();
}
