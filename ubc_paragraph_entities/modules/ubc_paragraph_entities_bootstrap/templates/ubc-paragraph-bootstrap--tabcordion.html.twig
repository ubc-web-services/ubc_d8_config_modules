{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% extends "@ubc_paragraph_entities/ubc-paragraph--tabcordion.html.twig" %}

{% set layout_attributes = create_attribute() %}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    'tabcordion',
    'tabcordion-bootsrap',
    paragraph.field_region_vertical_spacing.0.entity.field_class.value ? paragraph.field_region_vertical_spacing.0.entity.field_class.value|clean_class,
    paragraph.field_region_vertical_spacing.1.entity.field_class.value ? paragraph.field_region_vertical_spacing.1.entity.field_class.value|clean_class,
  ]
%}
{%
  set layout_classes = [
    paragraph.field_region_width.0.entity.field_class.value ? paragraph.field_region_width.0.entity.field_class.value,
  ]
%}

{% if paragraph.field_region_width.0.entity.field_class.value is empty %}
  {%
    set padding_classes = [
      'px-5',
      'md--px-4',
    ]
  %}
{% endif %}

{% block paragraph %}
<div{{ attributes.addClass(classes) }}>
  <div{{ layout_attributes.addClass(layout_classes, padding_classes) }}>
    <nav class="tabs tabcordion__tabs">
      <ul class="nav nav-tabs tabcordion__links" role="tablist">
      {% for key, value in paragraph.field_paragraph_tab.value %}
        {% set tabid = paragraph.field_paragraph_tab[key].entity.id() %}
        {% set tabtitle = paragraph.field_paragraph_tab[key].entity.field_paragraph_tab_title.value %}
        {% set tabtitle_clean = paragraph.field_paragraph_tab[key].entity.field_paragraph_tab_title.value|clean_class %}

        {% if key == 0 %}
          <li class="nav-item tabcordion__tab" role="presentation">
            <button class="nav-link active tabcordion__tab" id="nav-{{ tabtitle_clean }}-tab" data-bs-toggle="tab" data-bs-target="#nav-{{ tabtitle_clean }}" type="button" role="tab" aria-controls="nav-{{ tabtitle_clean }}" aria-selected="true">
              {{ tabtitle }}
            </button>
          </li>
          {% else %}
          <li class="nav-item tabcordion__tab" role="presentation">
            <button class="nav-link tabcordion__tab" id="nav-{{ tabtitle_clean }}-tab" data-bs-toggle="tab" data-bs-target="#nav-{{ tabtitle_clean }}" type="button" role="tab" aria-controls="nav-{{ tabtitle_clean }}" aria-selected="false">
              {{ tabtitle }}
            </button>
          </li>
        {% endif %}
      {% endfor %}
      </ul>
    </nav>
    <div class="tab-content tabs-details tabcordion__content-wrapper">
      {% for key, value in paragraph.field_paragraph_tab.value %}
        {% set tabtitle = paragraph.field_paragraph_tab[key].entity.field_paragraph_tab_title.value %}
        {% set tabtitle_clean = paragraph.field_paragraph_tab[key].entity.field_paragraph_tab_title.value|clean_class %}
        {% set tabcontent = paragraph.field_paragraph_tab[key].entity.field_paragraph_tab_content.value|check_markup(paragraph.field_paragraph_tab[key].entity.field_paragraph_tab_content.format) %}
        {% if key == 0 %}
          <button class="tabcordion__heading" type="button" data-bs-toggle="collapse" data-bs-target="#nav-{{ tabtitle_clean }}">
            {{ tabtitle }}
          </button>
          <div class="flow-root tab-pane fade show active text-formatted tabcordion__content" id="nav-{{ tabtitle_clean }}" role="tabpanel" aria-labelledby="nav-{{ tabtitle_clean }}-tab">
            {{ tabcontent }}
          </div>
          {% else %}
          <button class="tabcordion__heading collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#nav-{{ tabtitle_clean }}">
            {{ tabtitle }}
          </button>
          <div class="flow-root tab-pane fade text-formatted tabcordion__content" id="nav-{{ tabtitle_clean }}" role="tabpanel" aria-labelledby="nav-{{ tabtitle_clean }}-tab">
            {{ tabcontent }}
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>
</div>
{% endblock paragraph %}
