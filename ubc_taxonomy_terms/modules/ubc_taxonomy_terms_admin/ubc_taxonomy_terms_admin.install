<?php

use Drupal\taxonomy\Entity\Term;
/**
 * Implements hook_install().
 *
 * We want to seed our taxonomies with some terms, so we do that here.
 *
 * @ingroup ubc_taxonomy_terms_admin
 */
function ubc_taxonomy_terms_admin_install() {
  // Background Colour Classes
  $bgvocab = 'admin_background_color_settings';
  $bgitems = array(
    'White' => 'bg-white bg-light',
    'Unit Primary' => 'bg-unit-primary bg-dark',
    'Unit Secondary' => 'bg-unit-secondary bg-dark',
    'Unit Tertiary' => 'bg-unit-tertiary bg-light',
    'Unit Accent' => 'bg-unit-accent bg-light',
    'Light Grey' => 'bg-grey-100 bg-light',
    'UBC Blue' => 'bg-ubc-blue bg-dark',
    'UBC Blue: Sea' => 'bg-ubc-blue-sea bg-dark',
    'UBC Blue: Cobalt' => 'bg-ubc-blue-cobalt bg-dark',
    'UBC Blue: Neptune' => 'bg-ubc-blue-neptune bg-light',
    'UBC Blue: Cornflower' => 'bg-ubc-blue-cornflower bg-light',
    'UBC Blue: Polar' => 'bg-ubc-blue-polar bg-light',
    'UBC Blue: Frost' => 'bg-ubc-blue-frost bg-light',
    'None' => 'no-style',
  );
  foreach ($bgitems as $key => $value) {
    $term = Term::create(array(
      'parent' => array(),
      'name' =>$key,
      'vid' => $bgvocab,
      'field_class' => $value,
    ))->save();
  }

  // Icon Classes
  $iconvocab = 'admin_icon_settings';
  $iconitems = array(
    'Alert' => 'icon-alert',
    'Arrow' => 'icon-arrow',
    'Arrow in circle' => 'icon-arrow-circle',
    'Caret' => 'icon-caret',
    'Cart' => 'icon-cart',
    'Clock' => 'icon-clock',
    'Discussion' => 'icon-discussion',
    'Facebook' => 'icon-facebook',
    'Home' => 'icon-home',
    'Info' => 'icon-info',
    'Instagram' => 'icon-instagram',
    'LinkedIn' => 'icon-linkedin',
    'Location marker' => 'icon-location',
    'Mail' => 'icon-mail',
    'Minus sign' => 'icon-minus',
    'Pencil' => 'icon-pencil',
    'Phone' => 'icon-phone',
    'Play button' => 'icon-play',
    'Plus sign' => 'icon-plus',
    'RSS' => 'icon-rss',
    'Search' => 'icon-search',
    'Settings (gear)' => 'icon-settings',
    'Speech' => 'icon-speech',
    'Star' => 'icon-star',
    'Twitter' => 'icon-twitter',
    'User' => 'icon-user',
    'Vimeo' => 'icon-vimeo',
    'YouTube' => 'icon-youtube',
  );
  foreach ($iconitems as $key => $value) {
    $term = Term::create(array(
      'parent' => array(),
      'name' =>$key,
      'vid' => $iconvocab,
      'field_id' => $value,
    ))->save();
  }

    // Icon Position Classes
    $iconpositionvocab = 'admin_icon_position';
    $iconpositionitems = array(
      'Icon Top' => 'flex-col',
      'Icon Left' => 'flex-row',
      'Icon Right' => 'flex-row-reverse',
    );
    foreach ($iconpositionitems as $key => $value) {
      $term = Term::create(array(
        'parent' => array(),
        'name' =>$key,
        'vid' => $iconpositionvocab,
        'field_class' => $value,
      ))->save();
    }

  // Text Position Classes
  $textvocab = 'admin_postion_settings';
  $textitems = array(
    'Text Top Left' => 'text-left',
    'Text Top Center' => 'text-center',
    'Text Top Right' => 'text-right',
    'Text Middle Left' => 'place-content-center text-left',
    'Text Middle Center' => 'place-content-center text-center',
    'Text Middle Right' => 'place-content-center text-right',
    'Text Bottom Left' => 'mt-auto text-left',
    'Text Bottom Center' => 'mt-auto text-center',
    'Text Bottom Right' => 'mt-auto text-right',

  );
  foreach ($textitems as $key => $value) {
    $term = Term::create(array(
      'parent' => array(),
      'name' =>$key,
      'vid' => $textvocab,
      'field_class' => $value,
    ))->save();
  }

  // Horizontal Width Classes
  $widthvocab = 'admin_width_settings';
  $widthitems = array(
    'Contained' => 'container px-4 mx-auto md--px-0',
    'Narrow' => 'container px-4 mx-auto md--px-0 md--max-w-5xl',
  );
  foreach ($widthitems as $key => $value) {
    $term = Term::create(array(
      'parent' => array(),
      'name' =>$key,
      'vid' => $widthvocab,
      'field_class' => $value,
    ))->save();
  }

  // Vertical Spacing Classes
  $vspacevocab = 'admin_vertical_spacing_settings';
  $vspaceitems = array(
    'Loose' => 'py-16',
    'None' => 'py-0',
    'Normal' => 'py-12',
    'Tight' => 'py-6',
  );
  foreach ($vspaceitems as $key => $value) {
    $term = Term::create(array(
      'parent' => array(),
      'name' =>$key,
      'vid' => $vspacevocab,
      'field_class' => $value,
    ))->save();
  }

  // # Per Row settings
  $perrowvocab = 'admin_number_of_items_per_row';
  $perrowitems = array(
    'One' => 'md--grid-cols-1',
    'Two' => 'md--grid-cols-2',
    'Three' => 'md--grid-cols-3',
    'Four' => 'md--grid-cols-4',
    'Five' => 'md--grid-cols-5',
  );
  foreach ($perrowitems as $key => $value) {
    $term = Term::create(array(
      'parent' => array(),
      'name' =>$key,
      'vid' => $perrowvocab,
      'field_class' => $value,
    ))->save();
  }

}


/**
 * Implements hook_uninstall().
 *
 * Our content types will live on in the Drupal installation, even after this
 * module is uninstalled. This is a good thing, since it allows the user to
 * make decisions about their fate. Therefore we should give the user the
 * option of deleting them.
 *
 * Since we told Drupal that our ubc_taxonomy_terms_admin is locked, we now have
 * to tell it to unlock.
 *
 * @ingroup ubc_taxonomy_terms_admin
 */
/* function ubc_taxonomy_terms_admin_uninstall() {
  $locked = Drupal::state()->get('node.type.locked');
  unset($locked['ubc_taxonomy_terms_admin']);
  Drupal::state()->set('node.type.locked', $locked);
}
 */

/**
 * Update configuration from file.
 * https://www.drupal.org/docs/8/api/update-api/introduction-to-update-api-for-drupal-8
 * https://www.jeffgeerling.com/blog/2017/add-set-taxonomy-terms-custom-drupal-modules-update-hook
 */
function ubc_taxonomy_terms_admin_update_8001() {
}

/**
 * ADD tags.
 * https://www.jeffgeerling.com/blog/2017/add-set-taxonomy-terms-custom-drupal-modules-update-hook
 */
/* function ubc_taxonomy_terms_admin_update_8002() {
  $vocab = 'admin_background_color_settings';
  $items = [
    'White',
    'Light Grey',
    'UBC Blue',
    'UBC Blue: Sea',
    'UBC Blue: Cobalt',
    'UBC Blue: Neptune',
    'UBC Blue: Cornflower',
    'UBC Blue: Polar',
  ];
  foreach ($items as $item) {
    $term = Term::create(array(
      'parent' => array(),
      'name' => $item,
      'vid' => $vocab,
      //'field_class' => [$url],
    ))->save();
  }
} */
